# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env: # Define environment variables that might be needed across steps or for consistency
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a' # Or 'android_x86_64', 'android_armeabi_v7a' etc.
      ANDROID_SDK_VERSION: '34' # Example, align with your build.gradle
      ANDROID_NDK_VERSION: '26.1.10909125' # Example, check compatible versions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Or 'zulu', 'adopt', etc.
        java-version: '17' # Required by recent Android SDK tools

    - name: Install PySide6
      run: |
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        
        echo "Upgrading pip, setuptools, and wheel..."
        python -m pip install --upgrade pip setuptools wheel
        
        echo "Clearing pip cache..."
        python -m pip cache purge
        
        echo "Attempting to install PySide6==${QT_VERSION} with high verbosity..." # Use QT_VERSION for PySide6
        python -m pip install -vvv "pyside6==${QT_VERSION}"
        
        echo "Listing installed PySide packages..."
        python -m pip list | grep -i pyside || echo "No PySide packages found."

        echo "Checking if pyside6-android-deploy is available in PATH:"
        which pyside6-android-deploy || echo "::warning::pyside6-android-deploy not found in PATH. This might cause issues in the build step."

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3 # Using a dedicated action
      with:
        sdk-version: ${{ env.ANDROID_SDK_VERSION }}
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
        # build-tools-version: "34.0.0" # Optional: specify build tools version

    - name: Install Qt for Android using aqtinstall
      run: |
        echo "Installing aqtinstall..."
        python -m pip install aqtinstall
        
        echo "Installing Qt for Android version ${{ env.QT_VERSION }} for ${{ env.QT_ANDROID_ARCH }}..."
        # Modules typically needed for PySide6 Android: qt6core, qt6gui, qt6widgets, qtpyshared, qt6network, qt6qml (if using QML)
        aqt install-qt android android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -m qt6core qt6gui qt6widgets qtpyshared qt6svg
        
        # Set QT_PATH for subsequent steps
        # The default installation path for aqt is $HOME/Qt
        INSTALLED_QT_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"
        echo "INSTALLED_QT_PATH=${INSTALLED_QT_PATH}"
        
        if [ ! -d "$INSTALLED_QT_PATH" ]; then
          echo "::error::Qt for Android path not found after installation: $INSTALLED_QT_PATH. Listing $HOME/Qt..."
          ls -R $HOME/Qt || echo "$HOME/Qt does not exist."
          exit 1
        fi
        
        echo "QT_PATH=${INSTALLED_QT_PATH}" >> $GITHUB_ENV
        echo "Qt for Android installed at: ${INSTALLED_QT_PATH}"
        
        # Add Qt tools to PATH for subsequent steps
        echo "${INSTALLED_QT_PATH}/bin" >> $GITHUB_PATH
        echo "Added ${INSTALLED_QT_PATH}/bin to GITHUB_PATH"

    - name: Verify Environment Variables and Tools
      run: |
        echo "--- Verifying environment variables ---"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "QT_PATH: $QT_PATH" # This should now be set from the previous step
        echo "python version: $(python --version)"
        echo "java version:"
        java -version
        echo "pyside6-android-deploy location: $(which pyside6-android-deploy || echo 'not found')"
        echo "androiddeployqt location: $(which androiddeployqt || echo 'not found')"
        echo "PATH: $PATH"
        
        if [ -z "$QT_PATH" ]; then
          echo "::error::QT_PATH is still not set after the Qt installation step."
          exit 1
        fi
        if ! command -v androiddeployqt &> /dev/null; then
            echo "::error::androiddeployqt command could not be found. Ensure \$QT_PATH/bin was correctly added to the PATH."
            exit 1
        fi

    - name: Configure and Build APK
      #env:
        # ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }} # Handled by setup-android action
        # ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_HOME }} # Handled by setup-android action
        # QT_PATH is now set in GITHUB_ENV
        # LD_LIBRARY_PATH: "${QT_PATH}/lib:${LD_LIBRARY_PATH}" # May be needed
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        
        # Ensure pyside6-android-deploy is executable and in PATH
        if ! command -v pyside6-android-deploy &> /dev/null; then
            echo "::error::pyside6-android-deploy command could not be found."
            # Attempt to find it in common Python script locations if PATH is an issue
            PYTHON_BIN_PATH=$(dirname $(which python))
            if [ -f "$PYTHON_BIN_PATH/pyside6-android-deploy" ]; then
                echo "Found pyside6-android-deploy in $PYTHON_BIN_PATH, ensuring it's in PATH."
                export PATH="$PYTHON_BIN_PATH:$PATH"
            elif [ -f "$HOME/.local/bin/pyside6-android-deploy" ]; then
                echo "Found pyside6-android-deploy in $HOME/.local/bin, adding to PATH for this step."
                export PATH="$HOME/.local/bin:$PATH"
            fi
            # Re-check
            if ! command -v pyside6-android-deploy &> /dev/null; then
                 echo "::error::Still cannot find pyside6-android-deploy. Exiting."
                 exit 1
            fi
        fi
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        # Note: --qt-path is often derived by pyside6-android-deploy if QT_PATH env var is set
        # and androiddeployqt is in the system PATH. Explicitly providing it can be safer.
        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "${QT_ANDROID_ARCH#android_}" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --qt-path "$QT_PATH" \
          --android-abis "${QT_ANDROID_ARCH#android_},armeabi-v7a" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk # Path to the generated APK
        if-no-files-found: error
