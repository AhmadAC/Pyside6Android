# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest # Or a self-hosted runner with Android NDK/SDK pre-installed

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Your log indicated Python 3.11.12

    - name: Install PySide6 and build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Attempt to install the specific version 6.9.0 for both packages.
        # This version was indicated by the PySide6 metadata download attempt in your logs.
        echo "Attempting to install PySide6==6.9.0 and pyside6-tools==6.9.0"
        pip install pyside6==6.9.0 pyside6-tools==6.9.0
        #
        # === If the above line fails with "No matching distribution found for pyside6-tools==6.9.0" ===
        # or a similar error for 6.9.0, it means that specific version of pyside6-tools
        # might not be available for Python 3.11 on PyPI, or there was a transient issue.
        #
        # In that case, you could try a slightly older, known stable version set.
        # For example, to use PySide6 6.7.1 (which is known to be stable and widely used):
        #
        # echo "Attempting fallback to PySide6 6.7.1 due to issues with 6.9.0"
        # pip install pyside6==6.7.1 pyside6-tools==6.7.1
        #
        # You would then also need to ensure your Qt for Android setup (e.g., via aqtinstall)
        # matches this older Qt version (e.g., Qt 6.7.1).

    # ----- Crucial Step: Setup Android SDK & NDK -----
    - name: Setup Android SDK and NDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Android SDK & NDK setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Consider using an action like 'android-actions/setup-android'"
        echo " or ensure your runner has SDK/NDK pre-installed and configured."
        echo " Example: export ANDROID_HOME=/path/to/your/android-sdk"
        echo " Example: export ANDROID_NDK_HOME=/path/to/your/android-ndk-bundle"
        echo " You will also need to accept SDK licenses if installing manually."
        echo "--------------------------------------------------------------------"
        # For a GitHub-hosted runner, you might need something like:
        # sudo apt-get update
        # sudo apt-get install -y --no-install-recommends openjdk-17-jdk # Ensure Java 11 or 17 for modern Android
        # export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 # Adjust path if needed
        # export PATH=$JAVA_HOME/bin:$PATH
        #
        # # Example of manual SDK/NDK download (very simplified - proper setup is more involved)
        # # wget https://dl.google.com/android/repository/commandlinetools-linux-XXXXXXX_latest.zip
        # # mkdir -p $HOME/android-sdk
        # # unzip commandlinetools-linux-XXXXXXX_latest.zip -d $HOME/android-sdk/cmdline-tools/latest
        # # export ANDROID_HOME=$HOME/android-sdk
        # # export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools
        # # yes | sdkmanager --licenses # Accept licenses
        # # sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653" # Install components
        # # export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653 # Path might vary
        #
        # # If using android-actions/setup-android, it handles this for you.
        if [ -z "$ANDROID_HOME" ] || [ -z "$ANDROID_NDK_HOME" ]; then
          echo "::error::ANDROID_HOME or ANDROID_NDK_HOME is not set. Please configure Android SDK/NDK."
          echo "Consider using an action like 'kmaida/setup-android-sdk@v0.4.0' or 'android-actions/setup-android@v3'"
          exit 1
        fi
        if [ -z "$JAVA_HOME" ]; then
            echo "Warning: JAVA_HOME is not explicitly set. Relying on system default or attempting to find common JDKs."
            if [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
            elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
            elif [ -n "$JDK_HOME" ]; then # some actions might set JDK_HOME
                export JAVA_HOME="$JDK_HOME"
            else
                echo "::error::Could not automatically determine JAVA_HOME. Please set it up."
                exit 1
            fi
            export PATH="$JAVA_HOME/bin:$PATH"
        fi
        echo "Using JAVA_HOME: $JAVA_HOME"
        java -version
        # Verify sdkmanager and ndk-build are available if set up
        # sdkmanager --version || true
        # $ANDROID_NDK_HOME/ndk-build --version || true

    - name: Set up Qt for Android
      run: |
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Qt for Android setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Consider using 'aqt install-qt' to download Qt for Android."
        echo " Example: aqt install-qt android android 6.7.0 android_arm64_v8a -m qt6core qt6gui qt6widgets qt6network qt6quick qtpyshared"
        echo " Ensure the Qt version installed here matches the PySide6 version used (e.g., Qt 6.9.0 for PySide6 6.9.0)."
        echo " You would then need to set environment variables like QT_PATH or add Qt tools to PATH."
        echo " Example: export QT_PATH=\$HOME/Qt/6.9.0/android_arm64_v8a"
        echo " Example: export PATH=\$QT_PATH/bin:\$PATH"
        echo "--------------------------------------------------------------------"
        # Example using aqtinstall (uncomment and adapt if you use it)
        # pip install aqtinstall
        # export QT_VERSION=6.9.0 # <<< MAKE SURE THIS MATCHES PySide6 version
        # export QT_ANDROID_ARCH=android_arm64_v8a # Specify target architecture
        # aqt install-qt android android $QT_VERSION $QT_ANDROID_ARCH -m qt6core qt6gui qt6widgets qtpyshared # Add other modules as needed
        # export QT_PATH=$HOME/Qt/$QT_VERSION/$QT_ANDROID_ARCH # Path where aqt installs by default
        # export PATH=$QT_PATH/bin:$PATH
        # export QT_PLUGIN_PATH=$QT_PATH/plugins
        # export QML_IMPORT_PATH=$QT_PATH/qml
        # if [ ! -d "$QT_PATH" ]; then
        #   echo "::error::Qt for Android path not found: $QT_PATH. Please ensure Qt is installed and path is correct."
        #   exit 1
        # fi
        # echo "QT_PATH set to $QT_PATH"
        # which androiddeployqt # Check if Qt's androiddeployqt is in PATH
        # if ! which androiddeployqt > /dev/null; then
        #    echo "::error::androiddeployqt not found in PATH. Ensure Qt for Android bin directory is in PATH."
        #    exit 1
        # fi


    - name: Configure and Build APK
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_HOME }}
        # QT_PATH: ${{ env.QT_PATH }} # Pass QT_PATH if set in previous step and needed by pyside6-android-deploy
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        # Create dummy files if they don't exist for testing workflow structure
        # if [ ! -f main.py ]; then
        #  echo "import sys; from PySide6.QtWidgets import QApplication, QLabel; app = QApplication(sys.argv); label = QLabel('Hello Test from main.py'); label.show(); sys.exit(app.exec())" > main.py
        # fi
        # if [ ! -f AndroidManifest.xml ]; then
        #  echo '<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="org.example.dummy"><application android:label="DummyApp"></application></manifest>' > AndroidManifest.xml
        # fi

        mkdir -p build_android
        rm -rf build_android/*
        mkdir -p deployment_output
        rm -rf deployment_output/*

        # Ensure QT_PATH is set if you installed Qt manually and it's not in default search paths for pyside6-android-deploy
        # local_qt_path_var=""
        # if [ -n "$QT_PATH" ]; then
        #    local_qt_path_var="--qt-path \"$QT_PATH\""
        # fi

        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "arm64-v8a" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --android-abis "arm64-v8a,armeabi-v7a" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose
          # Add --android-manifest "./AndroidManifest.xml" if not in a standard location or name
          # Add $local_qt_path_var if you defined it above for a custom Qt path

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error # Fails the step if no APK is found
