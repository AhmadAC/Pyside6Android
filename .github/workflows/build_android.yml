# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PySide6 and build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Clearing pip cache..."
        python -m pip cache purge
        
        echo "Attempting to install PySide6==6.7.1 with high verbosity..."
        python -m pip install -vvv pyside6==6.7.1
        
        echo "Attempting to install pyside6-tools==6.7.1 from PyPI index with high verbosity..."
        python -m pip install -vvv pyside6-tools==6.7.1
        
        echo "Listing installed PySide packages..."
        python -m pip list | grep -i pyside || echo "No PySide packages found."

    # ----- Crucial Step: Setup Android SDK & NDK -----
    - name: Setup Android SDK and NDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Android SDK & NDK setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Consider using an action like 'android-actions/setup-android@v3' or 'kmaida/setup-android-sdk@v0.4.0'"
        echo "--------------------------------------------------------------------"
        if [ -z "$ANDROID_HOME" ] || [ -z "$ANDROID_NDK_HOME" ]; then
          echo "::error::ANDROID_HOME or ANDROID_NDK_HOME is not set. Please configure Android SDK/NDK."
          exit 1
        fi
        if [ -z "$JAVA_HOME" ]; then
            echo "Warning: JAVA_HOME is not explicitly set. Relying on system default or attempting to find common JDKs."
            if [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
            elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
            elif [ -n "$JDK_HOME" ]; then
                export JAVA_HOME="$JDK_HOME"
            else
                echo "::error::Could not automatically determine JAVA_HOME. Please set it up."
                exit 1
            fi
            export PATH="$JAVA_HOME/bin:$PATH"
        fi
        echo "Using JAVA_HOME: $JAVA_HOME"
        java -version

    - name: Set up Qt for Android
      run: |
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Qt for Android setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Use 'aqt install-qt' to download Qt 6.7.1 for Android to match PySide6 6.7.1."
        echo " Example: aqt install-qt android android 6.7.1 android_arm64_v8a -m qt6core qt6gui qt6widgets qtpyshared"
        echo " Example: export QT_PATH=\$HOME/Qt/6.7.1/android_arm64_v8a"
        echo "--------------------------------------------------------------------"
        # Example using aqtinstall (uncomment and adapt)
        # pip install aqtinstall
        # export QT_VERSION=6.7.1
        # export QT_ANDROID_ARCH=android_arm64_v8a
        # aqt install-qt android android $QT_VERSION $QT_ANDROID_ARCH -m qt6core qt6gui qt6widgets qtpyshared
        # export QT_PATH=$HOME/Qt/$QT_VERSION/$QT_ANDROID_ARCH
        # export PATH=$QT_PATH/bin:$PATH
        # if [ ! -d "$QT_PATH" ]; then
        #   echo "::error::Qt for Android path not found: $QT_PATH."
        #   exit 1
        # fi
        # if ! which androiddeployqt > /dev/null; then
        #    echo "::error::androiddeployqt not found in PATH."
        #    exit 1
        # fi

    - name: Configure and Build APK
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_HOME }}
      run: |
        echo "Current directory: $(pwd)"
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "arm64-v8a" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --android-abis "arm64-v8a,armeabi-v7a" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
