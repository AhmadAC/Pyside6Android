# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a' # e.g., android_arm64_v8a, android_armeabi_v7a
      QT_HOST_ARCH_INPUT: 'linux_gcc_64'
      QT_HOST_ARCH_DIR: 'gcc_64'
      ANDROID_PLATFORM_API_LEVEL: '34'
      ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
      ANDROID_NDK_VERSION: '26.1.10909125'
      JAVA_VERSION: '17'
      ANDROID_WHEELS_DIR: "${{ github.workspace }}/android_wheels" # Directory for Android wheels
      DEPLOY_CONFIG_FILE: "pyside6-android-deploy.json"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # For the runner's environment

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Install PySide6 (for host tools) and Download Android Wheels
      run: |
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        python -m pip install --upgrade pip setuptools wheel wget

        echo "Installing PySide6==${{ env.QT_VERSION }} for build tools (pyside6-android-deploy)..."
        python -m pip install -vvv "pyside6==${{ env.QT_VERSION }}"
        which pyside6-android-deploy || { echo "::error::pyside6-android-deploy not found in PATH after host installation."; exit 1; }
        
        mkdir -p ${{ env.ANDROID_WHEELS_DIR }}
        
        echo "Determining Android wheel architecture suffix..."
        ANDROID_WHEEL_ARCH_SUFFIX=""
        if [ "${{ env.QT_ANDROID_ARCH }}" = "android_arm64_v8a" ]; then
          ANDROID_WHEEL_ARCH_SUFFIX="android_aarch64"
        elif [ "${{ env.QT_ANDROID_ARCH }}" = "android_armeabi_v7a" ]; then
          ANDROID_WHEEL_ARCH_SUFFIX="android_armv7"
        elif [ "${{ env.QT_ANDROID_ARCH }}" = "android_x86_64" ]; then
          ANDROID_WHEEL_ARCH_SUFFIX="android_x86_64"
        elif [ "${{ env.QT_ANDROID_ARCH }}" = "android_x86" ]; then
          ANDROID_WHEEL_ARCH_SUFFIX="android_x86"
        else
          echo "::error::Unsupported QT_ANDROID_ARCH ('${{ env.QT_ANDROID_ARCH }}') for Android wheel suffix determination."
          exit 1
        fi
        echo "Android wheel architecture suffix: $ANDROID_WHEEL_ARCH_SUFFIX"

        # Corrected URL path: .../PySide6-${QT_VERSION}/...
        PYSIDE_ANDROID_WHEEL_URL="https://download.qt.io/official_releases/QtForPython/pyside6/PySide6-${{ env.QT_VERSION }}/PySide6-${{ env.QT_VERSION }}-cp39-abi3-${ANDROID_WHEEL_ARCH_SUFFIX}.whl"
        SHIBOKEN_ANDROID_WHEEL_URL="https://download.qt.io/official_releases/QtForPython/pyside6/PySide6-${{ env.QT_VERSION }}/shiboken6-${{ env.QT_VERSION }}-cp39-abi3-${ANDROID_WHEEL_ARCH_SUFFIX}.whl"
        
        echo "Attempting to download PySide6 Android wheel from: $PYSIDE_ANDROID_WHEEL_URL"
        wget --timeout=30 --tries=3 -P "${{ env.ANDROID_WHEELS_DIR }}" "$PYSIDE_ANDROID_WHEEL_URL"
        
        echo "Attempting to download Shiboken6 Android wheel from: $SHIBOKEN_ANDROID_WHEEL_URL"
        wget --timeout=30 --tries=3 -P "${{ env.ANDROID_WHEELS_DIR }}" "$SHIBOKEN_ANDROID_WHEEL_URL"

        echo "Listing downloaded Android wheels:"
        ls -R "${{ env.ANDROID_WHEELS_DIR }}"

        PYSIDE_WHEEL_FILE_NAME="PySide6-${{ env.QT_VERSION }}-cp39-abi3-${ANDROID_WHEEL_ARCH_SUFFIX}.whl"
        SHIBOKEN_WHEEL_FILE_NAME="shiboken6-${{ env.QT_VERSION }}-cp39-abi3-${ANDROID_WHEEL_ARCH_SUFFIX}.whl"
        
        PYSIDE_WHEEL_FULL_PATH="${{ env.ANDROID_WHEELS_DIR }}/$PYSIDE_WHEEL_FILE_NAME"
        SHIBOKEN_WHEEL_FULL_PATH="${{ env.ANDROID_WHEELS_DIR }}/$SHIBOKEN_WHEEL_FILE_NAME"

        if [ ! -f "$PYSIDE_WHEEL_FULL_PATH" ]; then
          echo "::error::PySide6 Android wheel file not found at $PYSIDE_WHEEL_FULL_PATH after download attempt."
          exit 1
        fi
        if [ ! -f "$SHIBOKEN_WHEEL_FULL_PATH" ]; then
          echo "::error::Shiboken6 Android wheel file not found at $SHIBOKEN_WHEEL_FULL_PATH after download attempt."
          exit 1
        fi
        
        echo "PYSIDE_WHEEL_PATH_ENV=$PYSIDE_WHEEL_FULL_PATH" >> "$GITHUB_ENV"
        echo "SHIBOKEN_WHEEL_PATH_ENV=$SHIBOKEN_WHEEL_FULL_PATH" >> "$GITHUB_ENV"
        echo "PySide6 Android wheel path: $PYSIDE_WHEEL_FULL_PATH"
        echo "Shiboken6 Android wheel path: $SHIBOKEN_WHEEL_FULL_PATH"

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        packages: >-
          platform-tools
          cmdline-tools;latest
          platforms;android-${{ env.ANDROID_PLATFORM_API_LEVEL }}
          build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}
          ndk;${{ env.ANDROID_NDK_VERSION }}

    - name: Install Qt for Host (Linux Desktop) and Android
      run: |
        echo "Installing aqtinstall..."
        python -m pip install aqtinstall
        
        echo "Installing Qt ${{ env.QT_VERSION }} for Host (Linux Desktop - ${{ env.QT_HOST_ARCH_INPUT }}) into $HOME/Qt ..."
        aqt install-qt linux desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH_INPUT }} -O "$HOME/Qt"
        
        QT_HOST_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_ARCH_DIR }}"
        if [ ! -f "${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt" ]; then
            echo "::error:: androiddeployqt not found in ${QT_HOST_INSTALLED_PATH}/bin after host Qt installation."
            ls -la "${QT_HOST_INSTALLED_PATH}/bin/" || echo "Directory ${QT_HOST_INSTALLED_PATH}/bin/ not found or empty."
            exit 1
        fi
        echo "Found androiddeployqt at ${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt"
        echo "QT_HOST_PATH=${QT_HOST_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "${QT_HOST_INSTALLED_PATH}/bin" >> $GITHUB_PATH

        echo "Installing Qt ${{ env.QT_VERSION }} for Android (${{ env.QT_ANDROID_ARCH }}) into $HOME/Qt ..."
        # Install default Android Qt package. This should include qtpyshared.
        # qt6svg is also likely included or can be added if `list-qt` confirms its name for Android.
        aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -O "$HOME/Qt" -m qt6svg qtpyshared
        
        ANDROID_QT_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"
        if [ ! -d "$ANDROID_QT_INSTALLED_PATH" ]; then
          echo "::error::Qt for Android path not found: $ANDROID_QT_INSTALLED_PATH."
          exit 1
        fi
        echo "QT_PATH=${ANDROID_QT_INSTALLED_PATH}" >> $GITHUB_ENV

    - name: Dynamically update deploy config JSON
      run: |
        if [ ! -f "${{ env.DEPLOY_CONFIG_FILE }}" ]; then
            echo "::error:: Deployment config file ${{ env.DEPLOY_CONFIG_FILE }} not found."
            exit 1
        fi
        echo "Original config:" && cat "${{ env.DEPLOY_CONFIG_FILE }}"
        if ! command -v jq &> /dev/null; then
            sudo apt-get update -y && sudo apt-get install -y jq
        fi
        TEMP_CONFIG_FILE="${{ env.DEPLOY_CONFIG_FILE }}.tmp"
        PRIMARY_ABI="${QT_ANDROID_ARCH#android_}"

        jq \
          --arg jdkPath "$JAVA_HOME" \
          --arg qtPath "$QT_PATH" \
          --arg qtHostPath "$QT_HOST_PATH" \
          --arg arch "$PRIMARY_ABI" \
          --argjson androidAbis "[\"$PRIMARY_ABI\"]" \
          '.jdkPath = $jdkPath | .qtPath = $qtPath | .qtHostPath = $qtHostPath | .arch = $arch | .androidAbis = $androidAbis' \
          "${{ env.DEPLOY_CONFIG_FILE }}" > "$TEMP_CONFIG_FILE" && mv "$TEMP_CONFIG_FILE" "${{ env.DEPLOY_CONFIG_FILE }}"

        echo "Updated config:" && cat "${{ env.DEPLOY_CONFIG_FILE }}"
        
    - name: Configure and Build APK
      run: |
        echo "Using PySide6 Android wheel: ${{ env.PYSIDE_WHEEL_PATH_ENV }}"
        echo "Using Shiboken6 Android wheel: ${{ env.SHIBOKEN_WHEEL_PATH_ENV }}"

        if [ ! -f "${{ env.PYSIDE_WHEEL_PATH_ENV }}" ]; then exit 1; fi
        if [ ! -f "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" ]; then exit 1; fi
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        
        pyside6-android-deploy \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --wheel-pyside "${{ env.PYSIDE_WHEEL_PATH_ENV }}" \
          --wheel-shiboken "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" \
          -c "${{ env.DEPLOY_CONFIG_FILE }}" \
          --verbose

    - name: List deployment output
      run: |
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
