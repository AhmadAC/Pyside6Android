# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a' # Options: android_arm64_v8a, android_x86_64, android_armeabi_v7a
      QT_HOST_ARCH: 'linux_gcc_64' # For the desktop Qt installation on the runner
      ANDROID_SDK_VERSION: '34'
      ANDROID_NDK_VERSION: '26.1.10909125'
      JAVA_VERSION: '17'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Install PySide6
      run: |
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        python -m pip install --upgrade pip setuptools wheel
        python -m pip cache purge
        echo "Attempting to install PySide6==${{ env.QT_VERSION }} with high verbosity..."
        python -m pip install -vvv "pyside6==${{ env.QT_VERSION }}"
        python -m pip list | grep -i pyside || echo "No PySide packages found."
        which pyside6-android-deploy || echo "::warning::pyside6-android-deploy not found in PATH initially."

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        sdk-version: ${{ env.ANDROID_SDK_VERSION }}
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}

    - name: Install Qt for Host (Linux Desktop) and Android
      run: |
        echo "Installing aqtinstall..."
        python -m pip install aqtinstall
        
        echo "Installing Qt ${{ env.QT_VERSION }} for Host (Linux Desktop - ${{ env.QT_HOST_ARCH }})..."
        aqt install-qt linux desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH }} -m qt6tools
        # Set QT_HOST_PATH for tools like androiddeployqt might look for it
        QT_HOST_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_ARCH }}"
        if [ ! -d "$QT_HOST_INSTALLED_PATH" ]; then
          echo "::error::Qt for Host path not found after installation: $QT_HOST_INSTALLED_PATH."
          exit 1
        fi
        echo "QT_HOST_PATH=${QT_HOST_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "Added ${QT_HOST_INSTALLED_PATH}/bin to GITHUB_PATH for host tools"
        echo "${QT_HOST_INSTALLED_PATH}/bin" >> $GITHUB_PATH

        echo "Installing Qt ${{ env.QT_VERSION }} for Android (${{ env.QT_ANDROID_ARCH }})..."
        # For Android, core modules are usually part of the arch package. Specify extras like qtpyshared, qt6svg.
        # qt6svg is an add-on, qtpyshared is for PySide.
        aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -m qt6svg qtpyshared
        
        ANDROID_QT_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"
        echo "ANDROID_QT_INSTALLED_PATH=${ANDROID_QT_INSTALLED_PATH}"
        
        if [ ! -d "$ANDROID_QT_INSTALLED_PATH" ]; then
          echo "::error::Qt for Android path not found after installation: $ANDROID_QT_INSTALLED_PATH. Listing $HOME/Qt..."
          ls -R $HOME/Qt || echo "$HOME/Qt does not exist."
          exit 1
        fi
        
        # This QT_PATH should point to the Android Qt installation for pyside6-android-deploy
        echo "QT_PATH=${ANDROID_QT_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "Qt for Android installed at: ${ANDROID_QT_INSTALLED_PATH}"
        
        # Add Android Qt tools to PATH if they are different or also needed directly (usually host tools are used)
        # echo "${ANDROID_QT_INSTALLED_PATH}/bin" >> $GITHUB_PATH # Usually not needed as host's androiddeployqt is used

    - name: Verify Environment Variables and Tools
      run: |
        echo "--- Verifying environment variables ---"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "QT_HOST_PATH: $QT_HOST_PATH" # Path to host Qt installation
        echo "QT_PATH: $QT_PATH"          # Path to Android Qt installation
        echo "python version: $(python --version)"
        echo "java version:"
        java -version
        echo "pyside6-android-deploy location: $(which pyside6-android-deploy || echo 'not found')"
        echo "androiddeployqt location: $(which androiddeployqt || echo 'not found')"
        echo "PATH: $PATH"
        
        if [ -z "$QT_PATH" ]; then
          echo "::error::QT_PATH (for Android Qt) is not set after the Qt installation step."
          exit 1
        fi
        if [ -z "$QT_HOST_PATH" ]; then
          echo "::error::QT_HOST_PATH (for Host Qt) is not set after the Qt installation step."
          exit 1
        fi
        if ! command -v androiddeployqt &> /dev/null; then
            echo "::error::androiddeployqt command could not be found. Ensure host Qt's bin directory was correctly added to the PATH."
            exit 1
        fi

    - name: Configure and Build APK
      run: |
        echo "Current directory: $(pwd)"
        
        if ! command -v pyside6-android-deploy &> /dev/null; then
            echo "::error::pyside6-android-deploy command could not be found."
            exit 1
        fi
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        PRIMARY_ABI="${QT_ANDROID_ARCH#android_}" 
        ANDROID_ABIS_VALUE="$PRIMARY_ABI" 

        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "$PRIMARY_ABI" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --qt-path "$QT_PATH" \
          --qt-host-path "$QT_HOST_PATH" \
          --android-abis "$ANDROID_ABIS_VALUE" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
