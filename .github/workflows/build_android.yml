# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a'
      QT_HOST_ARCH_INPUT: 'linux_gcc_64'
      QT_HOST_ARCH_DIR: 'gcc_64'
      ANDROID_PLATFORM_API_LEVEL: '34'
      ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
      ANDROID_NDK_VERSION: '26.1.10909125'
      JAVA_VERSION: '17'
      # Directory to download the HOST wheels (for pyside6-android-deploy tool itself)
      HOST_WHEELS_DIR: "${{ github.workspace }}/host_wheels"
      DEPLOY_CONFIG_FILE: "pyside6-android-deploy.json"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # This is for the runner's environment

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Download Host PySide6 Wheels and Install PySide6
      run: |
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        python -m pip install --upgrade pip setuptools wheel
        python -m pip cache purge
        
        mkdir -p ${{ env.HOST_WHEELS_DIR }}
        
        echo "Downloading HOST PySide6 and Shiboken6 wheels to ${{ env.HOST_WHEELS_DIR }}..."
        # These are for the x86_64 Linux runner environment
        python -m pip download --no-deps pyside6==${{ env.QT_VERSION }} -d "${{ env.HOST_WHEELS_DIR }}"
        python -m pip download --no-deps shiboken6==${{ env.QT_VERSION }} -d "${{ env.HOST_WHEELS_DIR }}"

        echo "Listing downloaded HOST wheels:"
        ls -R "${{ env.HOST_WHEELS_DIR }}"

        # Find the exact wheel file names for the HOST
        # Assuming Python 3.11 on the runner, so cp311
        PYSIDE_HOST_WHEEL_FILE=$(ls "${{ env.HOST_WHEELS_DIR }}"/PySide6-${{ env.QT_VERSION }}*cp311*-manylinux*.whl | head -n 1)
        SHIBOKEN_HOST_WHEEL_FILE=$(ls "${{ env.HOST_WHEELS_DIR }}"/shiboken6-${{ env.QT_VERSION }}*cp311*-manylinux*.whl | head -n 1)

        if [ -z "$PYSIDE_HOST_WHEEL_FILE" ] || [ ! -f "$PYSIDE_HOST_WHEEL_FILE" ]; then
          echo "::error::PySide6 HOST wheel file not found in ${{ env.HOST_WHEELS_DIR }}"
          exit 1
        fi
        if [ -z "$SHIBOKEN_HOST_WHEEL_FILE" ] || [ ! -f "$SHIBOKEN_HOST_WHEEL_FILE" ]; then
          echo "::error::Shiboken6 HOST wheel file not found in ${{ env.HOST_WHEELS_DIR }}"
          exit 1
        fi
        
        echo "PYSIDE_WHEEL_PATH_ENV=$PYSIDE_HOST_WHEEL_FILE" >> "$GITHUB_ENV"
        echo "SHIBOKEN_WHEEL_PATH_ENV=$SHIBOKEN_HOST_WHEEL_FILE" >> "$GITHUB_ENV"
        echo "PySide6 HOST wheel path: $PYSIDE_HOST_WHEEL_FILE"
        echo "Shiboken6 HOST wheel path: $SHIBOKEN_HOST_WHEEL_FILE"

        echo "Installing PySide6==${{ env.QT_VERSION }} (and dependencies) for build tools..."
        python -m pip install -vvv "pyside6==${{ env.QT_VERSION }}"
        
        echo "Listing installed PySide packages (host environment):"
        python -m pip list | grep -i pyside || echo "No PySide packages found in host environment."
        which pyside6-android-deploy || { echo "::error::pyside6-android-deploy not found in PATH after installation."; exit 1; }

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        packages: >-
          platform-tools
          cmdline-tools;latest
          platforms;android-${{ env.ANDROID_PLATFORM_API_LEVEL }}
          build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}
          ndk;${{ env.ANDROID_NDK_VERSION }}

    - name: Install Qt for Host (Linux Desktop) and Android
      run: |
        echo "Installing aqtinstall..."
        python -m pip install aqtinstall
        
        echo "Installing Qt ${{ env.QT_VERSION }} for Host (Linux Desktop - ${{ env.QT_HOST_ARCH_INPUT }}) into $HOME/Qt ..."
        aqt install-qt linux desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH_INPUT }} -O "$HOME/Qt"
        
        QT_HOST_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_ARCH_DIR }}"
        if [ ! -f "${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt" ]; then
            echo "::error:: androiddeployqt not found in ${QT_HOST_INSTALLED_PATH}/bin after host Qt installation."
            exit 1
        fi
        echo "Found androiddeployqt at ${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt"
        echo "QT_HOST_PATH=${QT_HOST_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "${QT_HOST_INSTALLED_PATH}/bin" >> $GITHUB_PATH

        echo "Installing Qt ${{ env.QT_VERSION }} for Android (${{ env.QT_ANDROID_ARCH }}) into $HOME/Qt ..."
        # Install Android Qt. This should include qtpyshared and qt6svg by default for this arch.
        # If it fails because of module names, remove -m qt6svg qtpyshared
        aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -O "$HOME/Qt" -m qt6svg qtpyshared
        
        ANDROID_QT_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"
        if [ ! -d "$ANDROID_QT_INSTALLED_PATH" ]; then
          echo "::error::Qt for Android path not found after installation: $ANDROID_QT_INSTALLED_PATH."
          exit 1
        fi
        echo "QT_PATH=${ANDROID_QT_INSTALLED_PATH}" >> $GITHUB_ENV

    - name: Dynamically update deploy config JSON
      run: |
        if [ ! -f "${{ env.DEPLOY_CONFIG_FILE }}" ]; then
            echo "::error:: Deployment config file ${{ env.DEPLOY_CONFIG_FILE }} not found in repository. Please create it."
            # Create a default one if not found, for robustness, but it's better to have it in repo
            cat <<EOF > ${{ env.DEPLOY_CONFIG_FILE }}
            {
                "appName": "MyQtApp",
                "applicationPackage": "org.example.myqtandroidapp",
                "arch": "${QT_ANDROID_ARCH#android_}",
                "jdkPath": "$JAVA_HOME",
                "qtPath": "$QT_PATH",
                "qtHostPath": "$QT_HOST_PATH",
                "androidAbis": ["${QT_ANDROID_ARCH#android_}"],
                "entryPoint": "./main.py",
                "assets": "",
                "qmlFiles": "",
                "qmlPaths": [],
                "useTranslations": false,
                "translationsPath": "./translations",
                "translationLanguages": [],
                "pysidedeployAllowPythonSource": true,
                "pysidedeployAllowCompiledPlusSource": true,
                "pysidedeployBlacklist": [],
                "pysidedeployBasedir": "",
                "pysidedeployVerboseLevel": 2,
                "pysidedeployLibLocation": "bundle",
                "pysidedeployPythonVersion": "3.9"
            }
            EOF
            echo "::warning:: Created a default ${{ env.DEPLOY_CONFIG_FILE }}. It's recommended to commit this file to your repository."
        else
            echo "Using existing config file: ${{ env.DEPLOY_CONFIG_FILE }}"
        fi
        
        echo "Original config content:"
        cat "${{ env.DEPLOY_CONFIG_FILE }}"
        
        # Install jq if not present
        if ! command -v jq &> /dev/null; then
            echo "jq could not be found, installing..."
            sudo apt-get update -y && sudo apt-get install -y jq
        fi
        
        TEMP_CONFIG_FILE="${{ env.DEPLOY_CONFIG_FILE }}.tmp"
        PRIMARY_ABI="${QT_ANDROID_ARCH#android_}"

        jq \
          --arg appName "MyQtApp" \
          --arg applicationPackage "org.example.myqtandroidapp" \
          --arg arch "$PRIMARY_ABI" \
          --arg jdkPath "$JAVA_HOME" \
          --arg qtPath "$QT_PATH" \
          --arg qtHostPath "$QT_HOST_PATH" \
          --argjson androidAbis "[\"$PRIMARY_ABI\"]" \
          --arg entryPoint "./main.py" \
          '.appName = $appName | .applicationPackage = $applicationPackage | .arch = $arch | .jdkPath = $jdkPath | .qtPath = $qtPath | .qtHostPath = $qtHostPath | .androidAbis = $androidAbis | .entryPoint = $entryPoint' \
          "${{ env.DEPLOY_CONFIG_FILE }}" > "$TEMP_CONFIG_FILE" && mv "$TEMP_CONFIG_FILE" "${{ env.DEPLOY_CONFIG_FILE }}"

        echo "Updated config content:"
        cat "${{ env.DEPLOY_CONFIG_FILE }}"
        
    - name: Configure and Build APK
      run: |
        echo "Current directory: $(pwd)"
        
        echo "Using PySide6 HOST wheel: ${{ env.PYSIDE_WHEEL_PATH_ENV }}"
        echo "Using Shiboken6 HOST wheel: ${{ env.SHIBOKEN_WHEEL_PATH_ENV }}"

        if [ ! -f "${{ env.PYSIDE_WHEEL_PATH_ENV }}" ]; then exit 1; fi
        if [ ! -f "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" ]; then exit 1; fi
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        
        pyside6-android-deploy \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --wheel-pyside "${{ env.PYSIDE_WHEEL_PATH_ENV }}" \
          --wheel-shiboken "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" \
          -c "${{ env.DEPLOY_CONFIG_FILE }}" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
