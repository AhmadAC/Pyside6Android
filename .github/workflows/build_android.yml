# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a'
      QT_HOST_ARCH_INPUT: 'linux_gcc_64'
      QT_HOST_ARCH_DIR: 'gcc_64'
      ANDROID_PLATFORM_API_LEVEL: '34'
      ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
      ANDROID_NDK_VERSION: '26.1.10909125'
      JAVA_VERSION: '17'
      PYSIDE_WHEELS_DIR: "${{ github.workspace }}/pyside_wheels"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Install PySide6 and Download Wheels
      id: install_pyside
      run: |
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        python -m pip install --upgrade pip setuptools wheel
        python -m pip cache purge
        
        mkdir -p ${{ env.PYSIDE_WHEELS_DIR }}
        
        echo "Downloading PySide6 and Shiboken6 wheels to ${{ env.PYSIDE_WHEELS_DIR }}..."
        python -m pip download pyside6==${{ env.QT_VERSION }} -d "${{ env.PYSIDE_WHEELS_DIR }}"
        python -m pip download shiboken6==${{ env.QT_VERSION }} -d "${{ env.PYSIDE_WHEELS_DIR }}"

        echo "Listing downloaded wheels:"
        ls -R "${{ env.PYSIDE_WHEELS_DIR }}"

        PYSIDE_WHEEL_FILE=$(ls "${{ env.PYSIDE_WHEELS_DIR }}"/PySide6-${{ env.QT_VERSION }}*cp39*-manylinux_2_28_x86_64.whl | head -n 1)
        SHIBOKEN_WHEEL_FILE=$(ls "${{ env.PYSIDE_WHEELS_DIR }}"/shiboken6-${{ env.QT_VERSION }}*cp39*-manylinux_2_28_x86_64.whl | head -n 1)

        if [ -z "$PYSIDE_WHEEL_FILE" ] || [ ! -f "$PYSIDE_WHEEL_FILE" ]; then
          echo "::error::PySide6 wheel file (cp39 manylinux_2_28_x86_64) not found in ${{ env.PYSIDE_WHEELS_DIR }}"
          exit 1
        fi
        if [ -z "$SHIBOKEN_WHEEL_FILE" ] || [ ! -f "$SHIBOKEN_WHEEL_FILE" ]; then
          echo "::error::Shiboken6 wheel file (cp39 manylinux_2_28_x86_64) not found in ${{ env.PYSIDE_WHEELS_DIR }}"
          exit 1
        fi
        
        echo "PYSIDE_WHEEL_PATH_ENV=$PYSIDE_WHEEL_FILE" >> "$GITHUB_ENV"
        echo "SHIBOKEN_WHEEL_PATH_ENV=$SHIBOKEN_WHEEL_FILE" >> "$GITHUB_ENV"
        echo "PySide6 wheel path: $PYSIDE_WHEEL_FILE"
        echo "Shiboken6 wheel path: $SHIBOKEN_WHEEL_FILE"

        echo "Installing PySide6 from downloaded wheels and PyPI for other dependencies..."
        python -m pip install -vvv "pyside6==${{ env.QT_VERSION }}"
        
        echo "Listing installed PySide packages..."
        python -m pip list | grep -i pyside || echo "No PySide packages found."
        which pyside6-android-deploy || { echo "::error::pyside6-android-deploy not found in PATH after installation."; exit 1; }

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        packages: >-
          platform-tools
          cmdline-tools;latest
          platforms;android-${{ env.ANDROID_PLATFORM_API_LEVEL }}
          build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}
          ndk;${{ env.ANDROID_NDK_VERSION }}

    - name: Install Qt for Host (Linux Desktop) and Android
      run: |
        echo "Installing aqtinstall..."
        python -m pip install aqtinstall
        
        echo "Installing Qt ${{ env.QT_VERSION }} for Host (Linux Desktop - ${{ env.QT_HOST_ARCH_INPUT }}) into $HOME/Qt ..."
        aqt install-qt linux desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH_INPUT }} -O "$HOME/Qt"
        
        QT_HOST_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_ARCH_DIR }}"
        if [ ! -d "$QT_HOST_INSTALLED_PATH" ]; then
          echo "::error::Qt for Host path not found after installation: $QT_HOST_INSTALLED_PATH."
          ls -R "$HOME/Qt" || echo "$HOME/Qt does not exist or is empty."
          exit 1
        fi
        if [ ! -f "${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt" ]; then
            echo "::error:: androiddeployqt not found in ${QT_HOST_INSTALLED_PATH}/bin after host Qt installation."
            ls -la "${QT_HOST_INSTALLED_PATH}/bin/" || echo "Directory ${QT_HOST_INSTALLED_PATH}/bin/ not found or empty."
            exit 1
        else
            echo "Found androiddeployqt at ${QT_HOST_INSTALLED_PATH}/bin/androiddeployqt"
        fi
        echo "QT_HOST_PATH=${QT_HOST_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "Added ${QT_HOST_INSTALLED_PATH}/bin to GITHUB_PATH for host tools"
        echo "${QT_HOST_INSTALLED_PATH}/bin" >> $GITHUB_PATH

        echo "Attempting to install Qt ${{ env.QT_VERSION }} for Android (${{ env.QT_ANDROID_ARCH }}) into $HOME/Qt ..."
        # MODIFIED: Remove -m arguments for Android Qt installation.
        # This will install the default package for the specified Android architecture.
        # qtpyshared and qt6svg are typically included.
        aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -O "$HOME/Qt"
        
        ANDROID_QT_INSTALLED_PATH="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"
        echo "ANDROID_QT_INSTALLED_PATH=${ANDROID_QT_INSTALLED_PATH}"
        
        if [ ! -d "$ANDROID_QT_INSTALLED_PATH" ]; then
          echo "::error::Qt for Android path not found after installation: $ANDROID_QT_INSTALLED_PATH. Listing $HOME/Qt..."
          ls -R "$HOME/Qt" || echo "$HOME/Qt does not exist."
          exit 1
        fi
        
        # Verify libpyshared.so (critical for PySide6)
        if [ ! -f "${ANDROID_QT_INSTALLED_PATH}/lib/libpyshared.so" ] && \
           [ ! -f "${ANDROID_QT_INSTALLED_PATH}/plugins/platforms/libpyshared.so" ] && \
           [ ! -f "${ANDROID_QT_INSTALLED_PATH}/lib/aarch64-linux-android/libpyshared.so" ] && \
           [ ! -f "${ANDROID_QT_INSTALLED_PATH}/arch/${QT_ANDROID_ARCH#android_}/lib/libpyshared.so" ] && \
           [ ! -f "${ANDROID_QT_INSTALLED_PATH}/plugins/android/libpyshared.so" ] ; then
            echo "::warning:: libpyshared.so not found in common locations within ${ANDROID_QT_INSTALLED_PATH}. PySide6 apps may not run."
            echo "Listing contents of ${ANDROID_QT_INSTALLED_PATH} and its subdirectories to verify:"
            ls -R "${ANDROID_QT_INSTALLED_PATH}" || echo "Directory ${ANDROID_QT_INSTALLED_PATH} not found or empty."
            # If the build fails later due to missing libpyshared.so, this ls output will be key
        else
            echo "Found or assumed libpyshared.so to be present within ${ANDROID_QT_INSTALLED_PATH}"
        fi

        # Verify libQt6Svg.so (if your app uses SVG)
        if [ ! -f "${ANDROID_QT_INSTALLED_PATH}/lib/libQt6Svg.so" ] && \
           [ ! -f "${ANDROID_QT_INSTALLED_PATH}/arch/${QT_ANDROID_ARCH#android_}/lib/libQt6Svg.so" ] ; then
             echo "::warning:: libQt6Svg.so not found in common locations within ${ANDROID_QT_INSTALLED_PATH}."
        else
            echo "Found or assumed libQt6Svg.so to be present within ${ANDROID_QT_INSTALLED_PATH}"
        fi

        echo "QT_PATH=${ANDROID_QT_INSTALLED_PATH}" >> $GITHUB_ENV
        echo "Qt for Android installed at: ${ANDROID_QT_INSTALLED_PATH}"

    - name: Verify Environment Variables and Tools
      run: |
        echo "--- Verifying environment variables ---"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "QT_HOST_PATH: $QT_HOST_PATH"
        echo "QT_PATH: $QT_PATH"
        echo "PYSIDE_WHEEL_PATH_ENV: ${{ env.PYSIDE_WHEEL_PATH_ENV }}"
        echo "SHIBOKEN_WHEEL_PATH_ENV: ${{ env.SHIBOKEN_WHEEL_PATH_ENV }}"
        echo "python version: $(python --version)"
        echo "java version:"
        java -version
        echo "pyside6-android-deploy location: $(which pyside6-android-deploy || echo 'pyside6-android-deploy not found')"
        echo "androiddeployqt location: $(which androiddeployqt || echo 'androiddeployqt not found')"
        echo "PATH: $PATH"
        
        if [ -z "$QT_PATH" ]; then echo "::error::QT_PATH (for Android Qt) is not set."; exit 1; fi
        if [ -z "$QT_HOST_PATH" ]; then echo "::error::QT_HOST_PATH (for Host Qt) is not set."; exit 1; fi
        if [ -z "${{ env.PYSIDE_WHEEL_PATH_ENV }}" ]; then echo "::error::PYSIDE_WHEEL_PATH_ENV is not set."; exit 1; fi
        if [ -z "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" ]; then echo "::error::SHIBOKEN_WHEEL_PATH_ENV is not set."; exit 1; fi
        if ! command -v androiddeployqt &> /dev/null; then
            echo "::error::androiddeployqt command could not be found in PATH."
            exit 1
        fi
        if ! command -v pyside6-android-deploy &> /dev/null; then
            echo "::error::pyside6-android-deploy command could not be found."
            exit 1
        fi

    - name: Configure and Build APK
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        
        echo "Using PySide6 wheel: ${{ env.PYSIDE_WHEEL_PATH_ENV }}"
        echo "Using Shiboken6 wheel: ${{ env.SHIBOKEN_WHEEL_PATH_ENV }}"

        if [ ! -f "${{ env.PYSIDE_WHEEL_PATH_ENV }}" ]; then
            echo "::error:: PySide6 wheel file not found at ${{ env.PYSIDE_WHEEL_PATH_ENV }}"
            ls -R "${{ env.PYSIDE_WHEELS_DIR }}"
            exit 1
        fi
        if [ ! -f "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" ]; then
            echo "::error:: Shiboken6 wheel file not found at ${{ env.SHIBOKEN_WHEEL_PATH_ENV }}"
            ls -R "${{ env.PYSIDE_WHEELS_DIR }}"
            exit 1
        fi
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        PRIMARY_ABI="${QT_ANDROID_ARCH#android_}" 
        ANDROID_ABIS_VALUE="$PRIMARY_ABI" 

        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "$PRIMARY_ABI" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --qt-path "$QT_PATH" \
          --qt-host-path "$QT_HOST_PATH" \
          --android-abis "$ANDROID_ABIS_VALUE" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --wheel-pyside "${{ env.PYSIDE_WHEEL_PATH_ENV }}" \
          --wheel-shiboken "${{ env.SHIBOKEN_WHEEL_PATH_ENV }}" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
