# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      QT_VERSION: '6.7.1'
      QT_ANDROID_ARCH: 'android_arm64_v8a'
      QT_HOST_ARCH_INPUT: 'linux_gcc_64' # Arch for aqt input
      QT_HOST_ARCH_DIR: 'gcc_64'        # Actual directory name created by aqt for the host
      ANDROID_PLATFORM_API_LEVEL: '34'
      ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
      ANDROID_NDK_VERSION: '26.1.10909125' # Ensure this NDK version is compatible with your Qt and target
      JAVA_VERSION: '17'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Java (JDK)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Install PySide6
      shell: bash
      run: |
        set -eo pipefail
        echo "Verifying Python and pip versions:"
        python --version
        which python
        python -m pip --version
        echo "--------------------------------------------------------------------"
        echo "Upgrading pip, setuptools, and wheel..."
        python -m pip install --upgrade pip setuptools wheel
        
        echo "Clearing pip cache..."
        python -m pip cache purge || echo "Pip cache purge failed, continuing..."
        
        echo "Attempting to install PySide6==${{ env.QT_VERSION }} with high verbosity..."
        if ! python -m pip install -vvv "pyside6==${{ env.QT_VERSION }}"; then
          echo "::error::Failed to install PySide6."
          exit 1
        fi
        
        echo "Listing installed PySide packages..."
        python -m pip list | grep -i pyside || echo "::warning::No PySide packages found after install attempt."

        echo "Verifying pyside6-android-deploy availability..."
        if ! which pyside6-android-deploy > /dev/null; then
            echo "::error::pyside6-android-deploy not found in PATH after PySide6 installation."
            # Attempt to find it in common Python script locations
            PYTHON_BIN_PATH=$(dirname $(which python))
            if [ -f "$PYTHON_BIN_PATH/pyside6-android-deploy" ]; then
                echo "Found pyside6-android-deploy in $PYTHON_BIN_PATH. Adding to PATH for this job."
                echo "$PYTHON_BIN_PATH" >> $GITHUB_PATH
            elif [ -f "$HOME/.local/bin/pyside6-android-deploy" ]; then
                echo "Found pyside6-android-deploy in $HOME/.local/bin. Adding to PATH for this job."
                echo "$HOME/.local/bin" >> $GITHUB_PATH
            fi
            # Re-check
            if ! which pyside6-android-deploy > /dev/null; then
                echo "::error::Still cannot find pyside6-android-deploy after attempting to fix PATH."
                exit 1
            fi
        fi
        echo "pyside6-android-deploy found at: $(which pyside6-android-deploy)"

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      with:
        packages: >-
          platform-tools
          cmdline-tools;latest
          platforms;android-${{ env.ANDROID_PLATFORM_API_LEVEL }}
          build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}
          ndk;${{ env.ANDROID_NDK_VERSION }}
        accept-licenses: 'true' # Accept all necessary SDK licenses

    - name: Install Qt for Host (Linux Desktop) and Android
      shell: bash
      run: |
        set -eo pipefail
        echo "Installing aqtinstall..."
        if ! python -m pip install aqtinstall; then
          echo "::error::Failed to install aqtinstall."
          exit 1
        fi
        
        MIRRORS=(
          "https://mirrors.dotsrc.org/qtproject/"
          "https://ftp.fau.de/qtproject/"
          "https://mirrors.ocf.berkeley.edu/qt/"
          "https://download.qt.io/" # Default, try last
        )
        MAX_ATTEMPTS_PER_MIRROR=3
        RETRY_DELAY_SECONDS=10

        # --- Install Host Qt ---
        echo "--- Attempting to install Host Qt (Linux Desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH_INPUT }}) ---"
        HOST_QT_INSTALL_SUCCESS=false
        QT_HOST_INSTALLED_PATH_VALUE="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_ARCH_DIR }}"

        for mirror_url in "${MIRRORS[@]}"; do
          echo "Trying host Qt installation with mirror: $mirror_url"
          for attempt in $(seq 1 $MAX_ATTEMPTS_PER_MIRROR); do
            echo "Attempt $attempt/$MAX_ATTEMPTS_PER_MIRROR for host Qt with mirror $mirror_url"
            # Clean up previous attempt's partial install to avoid conflicts
            rm -rf "$QT_HOST_INSTALLED_PATH_VALUE"
            if aqt install-qt linux desktop ${{ env.QT_VERSION }} ${{ env.QT_HOST_ARCH_INPUT }} -O "$HOME/Qt" --base "$mirror_url"; then
              if [ -d "$QT_HOST_INSTALLED_PATH_VALUE" ] && [ -f "${QT_HOST_INSTALLED_PATH_VALUE}/bin/androiddeployqt" ]; then
                echo "Host Qt installed successfully from $mirror_url."
                echo "Found androiddeployqt at ${QT_HOST_INSTALLED_PATH_VALUE}/bin/androiddeployqt"
                HOST_QT_INSTALL_SUCCESS=true
                break # break from attempts
              else
                echo "::warning::Host Qt install reported success from $mirror_url, but androiddeployqt or path ${QT_HOST_INSTALLED_PATH_VALUE} is missing. Listing $HOME/Qt:"
                ls -R $HOME/Qt || echo "$HOME/Qt does not exist."
              fi
            else
              echo "::warning::Host Qt install failed with mirror $mirror_url, attempt $attempt."
            fi
            if [ "$HOST_QT_INSTALL_SUCCESS" = true ]; then break; fi
            if [ "$attempt" -lt "$MAX_ATTEMPTS_PER_MIRROR" ]; then 
              echo "Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
            else 
              echo "Max attempts reached for mirror $mirror_url for host Qt."
            fi
          done
          if [ "$HOST_QT_INSTALL_SUCCESS" = true ]; then break; fi
        done

        if [ "$HOST_QT_INSTALL_SUCCESS" = false ]; then
          echo "::error::Failed to install host Qt from all mirrors after multiple attempts."
          exit 1
        fi
        echo "QT_HOST_PATH=${QT_HOST_INSTALLED_PATH_VALUE}" >> $GITHUB_ENV
        echo "Added ${QT_HOST_INSTALLED_PATH_VALUE}/bin to GITHUB_PATH for host tools"
        echo "${QT_HOST_INSTALLED_PATH_VALUE}/bin" >> $GITHUB_PATH

        # --- Install Android Qt ---
        echo "--- Attempting to install Android Qt (${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }}) ---"
        ANDROID_QT_INSTALL_SUCCESS=false
        ANDROID_QT_INSTALLED_PATH_VALUE="$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_ARCH }}"

        for mirror_url in "${MIRRORS[@]}"; do
          echo "Trying Android Qt installation with mirror: $mirror_url"
          for attempt in $(seq 1 $MAX_ATTEMPTS_PER_MIRROR); do
            echo "Attempt $attempt/$MAX_ATTEMPTS_PER_MIRROR for Android Qt with mirror $mirror_url"
            # Clean up previous attempt's partial install
            rm -rf "$ANDROID_QT_INSTALLED_PATH_VALUE"
            if aqt install-qt linux android ${{ env.QT_VERSION }} ${{ env.QT_ANDROID_ARCH }} -m qt6svg qtpyshared -O "$HOME/Qt" --base "$mirror_url"; then
              if [ -d "$ANDROID_QT_INSTALLED_PATH_VALUE" ] && [ -d "${ANDROID_QT_INSTALLED_PATH_VALUE}/include/QtCore" ]; then # Check for a common include dir
                echo "Android Qt installed successfully from $mirror_url."
                ANDROID_QT_INSTALL_SUCCESS=true
                break # break from attempts
              else
                echo "::warning::Android Qt installed from $mirror_url, but path ${ANDROID_QT_INSTALLED_PATH_VALUE} or a key subdirectory is missing. Listing $HOME/Qt:"
                ls -R $HOME/Qt || echo "$HOME/Qt does not exist."
              fi
            else
              echo "::warning::Android Qt install failed with mirror $mirror_url, attempt $attempt."
            fi
            if [ "$ANDROID_QT_INSTALL_SUCCESS" = true ]; then break; fi
            if [ "$attempt" -lt "$MAX_ATTEMPTS_PER_MIRROR" ]; then
              echo "Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
            else
              echo "Max attempts reached for mirror $mirror_url for Android Qt."
            fi
          done
          if [ "$ANDROID_QT_INSTALL_SUCCESS" = true ]; then break; fi
        done
        
        if [ "$ANDROID_QT_INSTALL_SUCCESS" = false ]; then
          echo "::error::Failed to install Android Qt from all mirrors after multiple attempts."
          exit 1
        fi
        echo "QT_PATH=${ANDROID_QT_INSTALLED_PATH_VALUE}" >> $GITHUB_ENV
        echo "Qt for Android installed at: ${ANDROID_QT_INSTALLED_PATH_VALUE}"

    - name: Verify Environment Variables and Tools
      shell: bash
      run: |
        set -eo pipefail
        echo "--- Verifying environment variables ---"
        echo "ANDROID_HOME: $ANDROID_HOME"
        if [ -z "$ANDROID_HOME" ] || [ ! -d "$ANDROID_HOME" ]; then echo "::error::ANDROID_HOME is not set or not a directory."; exit 1; fi
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        if [ -z "$ANDROID_NDK_HOME" ] || [ ! -d "$ANDROID_NDK_HOME" ]; then echo "::error::ANDROID_NDK_HOME is not set or not a directory."; exit 1; fi
        echo "JAVA_HOME: $JAVA_HOME"
        if [ -z "$JAVA_HOME" ] || [ ! -d "$JAVA_HOME" ]; then echo "::error::JAVA_HOME is not set or not a directory."; exit 1; fi
        echo "QT_HOST_PATH: $QT_HOST_PATH"
        if [ -z "$QT_HOST_PATH" ] || [ ! -d "$QT_HOST_PATH" ]; then echo "::error::QT_HOST_PATH is not set or not a directory."; exit 1; fi
        echo "QT_PATH: $QT_PATH"
        if [ -z "$QT_PATH" ] || [ ! -d "$QT_PATH" ]; then echo "::error::QT_PATH (Android Qt) is not set or not a directory."; exit 1; fi
        
        echo "--- Verifying tool versions and availability ---"
        echo "python version: $(python --version)"
        echo "java version:"
        java -version || { echo "::error::Java command not found or failed."; exit 1; }
        
        echo "pyside6-android-deploy location: $(which pyside6-android-deploy || echo 'pyside6-android-deploy not found in PATH')"
        if ! command -v pyside6-android-deploy &> /dev/null; then
            echo "::error::pyside6-android-deploy command could not be found. Ensure PySide6 was installed correctly and its scripts directory is in the PATH."
            exit 1
        fi
        echo "androiddeployqt location: $(which androiddeployqt || echo 'androiddeployqt not found in PATH')"
        if ! command -v androiddeployqt &> /dev/null; then
            echo "::error::androiddeployqt command could not be found. Ensure host Qt's bin directory was correctly added to the PATH."
            exit 1
        fi
        echo "PATH: $PATH"

    - name: Configure and Build APK
      shell: bash
      run: |
        set -eo pipefail
        echo "Current directory: $(pwd)"
        ls -la # List files to ensure main.py and others are present
        
        mkdir -p build_android && rm -rf build_android/*
        mkdir -p deployment_output && rm -rf deployment_output/*
        
        echo "Running pyside6-android-deploy..."
        # Ensure QT_HOST_PATH is also available to pyside6-android-deploy if it needs it
        # by checking if it's in the PATH already from the previous step.
        # pyside6-android-deploy usually uses `androiddeployqt` from the system PATH,
        # which should point to the host Qt's bin directory.
        
        PRIMARY_ABI="${QT_ANDROID_ARCH#android_}" 
        ANDROID_ABIS_VALUE="$PRIMARY_ABI" 

        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "$PRIMARY_ABI" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --qt-path "$QT_PATH" \
          --qt-host-path "$QT_HOST_PATH" \
          --android-abis "$ANDROID_ABIS_VALUE" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
