# .github/workflows/build_android.yml
name: Build Qt for Python Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PySide6 and build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Using version 6.7.1 as it's the latest available for pyside6-tools
        echo "Attempting to install PySide6==6.7.1 and pyside6-tools==6.7.1"
        pip install pyside6==6.7.1 pyside6-tools==6.7.1

    # ----- Crucial Step: Setup Android SDK & NDK -----
    - name: Setup Android SDK and NDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Android SDK & NDK setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Consider using an action like 'android-actions/setup-android@v3' or 'kmaida/setup-android-sdk@v0.4.0'"
        echo " Example: export ANDROID_HOME=/path/to/your/android-sdk"
        echo " Example: export ANDROID_NDK_HOME=/path/to/your/android-ndk-bundle"
        echo " You will also need to accept SDK licenses if installing manually."
        echo "--------------------------------------------------------------------"
        # Example using android-actions/setup-android (Uncomment and configure)
        # - name: Setup Android SDK and NDK (via android-actions)
        #   uses: android-actions/setup-android@v3 # Or check for latest version
        #   with:
        #     sdk-platform: "android-33" # Example API level
        #     ndk-version: "25.2.9519653" # Example NDK version, check compatibility with Qt
        #     cmake-version: "3.22.1" # Example CMake version

        # Fallback basic checks if variables are expected to be pre-set or set by another action
        if [ -z "$ANDROID_HOME" ] || [ -z "$ANDROID_NDK_HOME" ]; then
          echo "::error::ANDROID_HOME or ANDROID_NDK_HOME is not set. Please configure Android SDK/NDK."
          echo "Consider using an action like 'kmaida/setup-android-sdk@v0.4.0' or 'android-actions/setup-android@v3'"
          exit 1
        fi
        if [ -z "$JAVA_HOME" ]; then
            echo "Warning: JAVA_HOME is not explicitly set. Relying on system default or attempting to find common JDKs."
            if [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
            elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
                export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
            elif [ -n "$JDK_HOME" ]; then # some actions might set JDK_HOME
                export JAVA_HOME="$JDK_HOME"
            else
                echo "::error::Could not automatically determine JAVA_HOME. Please set it up."
                exit 1
            fi
            export PATH="$JAVA_HOME/bin:$PATH"
        fi
        echo "Using JAVA_HOME: $JAVA_HOME"
        java -version

    - name: Set up Qt for Android
      run: |
        echo "--------------------------------------------------------------------"
        echo " Placeholder for Qt for Android setup."
        echo " You MUST implement this step for the build to succeed."
        echo " Use 'aqt install-qt' to download Qt 6.7.1 for Android to match PySide6 6.7.1."
        echo " Example: aqt install-qt android android 6.7.1 android_arm64_v8a -m qt6core qt6gui qt6widgets qtpyshared" # Adjusted version
        echo " You would then need to set environment variables like QT_PATH or add Qt tools to PATH."
        echo " Example: export QT_PATH=\$HOME/Qt/6.7.1/android_arm64_v8a" # Adjusted version
        echo " Example: export PATH=\$QT_PATH/bin:\$PATH"
        echo "--------------------------------------------------------------------"
        # Example using aqtinstall (uncomment and adapt)
        # pip install aqtinstall
        # export QT_VERSION=6.7.1 # <<< MAKE SURE THIS MATCHES PySide6 version (6.7.1)
        # export QT_ANDROID_ARCH=android_arm64_v8a # Specify target architecture (e.g., android_arm64_v8a, android_armv7)
        # # Add modules your app needs, qtpyshared is crucial for PySide
        # aqt install-qt android android $QT_VERSION $QT_ANDROID_ARCH -m qt6core qt6gui qt6widgets qtpyshared
        # export QT_PATH=$HOME/Qt/$QT_VERSION/$QT_ANDROID_ARCH # Path where aqt installs by default
        # export PATH=$QT_PATH/bin:$PATH
        # export QT_PLUGIN_PATH=$QT_PATH/plugins
        # export QML_IMPORT_PATH=$QT_PATH/qml
        #
        # if [ ! -d "$QT_PATH" ]; then
        #   echo "::error::Qt for Android path not found: $QT_PATH. Please ensure Qt is installed and path is correct."
        #   exit 1
        # fi
        # echo "QT_PATH set to $QT_PATH"
        # if ! which androiddeployqt > /dev/null; then
        #    echo "::error::androiddeployqt not found in PATH. Ensure Qt for Android bin directory is in PATH ($QT_PATH/bin)."
        #    exit 1
        # fi

    - name: Configure and Build APK
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_HOME }}
        # QT_PATH: ${{ env.QT_PATH }} # Pass QT_PATH if set in previous step and pyside6-android-deploy needs it explicitly
      run: |
        echo "Current directory: $(pwd)"
        ls -la

        mkdir -p build_android
        rm -rf build_android/*
        mkdir -p deployment_output
        rm -rf deployment_output/*

        # Prepare arguments for pyside6-android-deploy
        # Ensure QT_PATH is set if you installed Qt manually and it's not in default search paths
        # local_qt_path_arg=""
        # if [ -n "$QT_PATH" ]; then # Check if QT_PATH was set by the Qt setup step
        #    local_qt_path_arg="--qt-path \"$QT_PATH\""
        # fi
        # if [ -n "$QT_ANDROID_DIR" ]; then # Some setups might use QT_ANDROID_DIR
        #    local_qt_path_arg="--qt-path \"$QT_ANDROID_DIR\""
        # fi

        pyside6-android-deploy \
          --name "MyQtApp" \
          --package "org.example.myqtandroidapp" \
          --arch "arm64-v8a" \
          --sdk-path "$ANDROID_HOME" \
          --ndk-path "$ANDROID_NDK_HOME" \
          --jdk-path "$JAVA_HOME" \
          --android-abis "arm64-v8a,armeabi-v7a" \
          --entry-point "./main.py" \
          --build-dir "./build_android" \
          --output "./deployment_output" \
          --verbose
          # Add --android-manifest "./AndroidManifest.xml" # if not in a standard location or name
          # Add $local_qt_path_arg # if you defined it above for a custom Qt path

    - name: List deployment output
      run: |
        echo "Listing contents of deployment_output:"
        ls -R deployment_output

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-qt-android-app-apk
        path: deployment_output/**/*.apk
        if-no-files-found: error
